/// <reference types="node" />
/// <reference types="node" />
import Stream from 'stream';
import type Http from 'http';
import type { Logger } from '../../logger';
import type { Connection, ConnectionParams, ExecParams, ExecResult, InsertParams, InsertResult, QueryParams, QueryResult } from '../connection';
export interface RequestParams {
    method: 'GET' | 'POST';
    url: URL;
    body?: string | Stream.Readable;
    abort_signal?: AbortSignal;
    decompress_response?: boolean;
    compress_request?: boolean;
}
export declare abstract class BaseHttpAdapter implements Connection {
    protected readonly config: ConnectionParams;
    private readonly logger;
    protected readonly agent: Http.Agent;
    protected readonly headers: Http.OutgoingHttpHeaders;
    private readonly retry_expired_sockets;
    private readonly known_sockets;
    protected constructor(config: ConnectionParams, logger: Logger, agent: Http.Agent);
    protected buildDefaultHeaders(username: string, password: string): Http.OutgoingHttpHeaders;
    protected abstract createClientRequest(params: RequestParams, abort_signal?: AbortSignal): Http.ClientRequest;
    private request;
    private _request;
    ping(): Promise<boolean>;
    query(params: QueryParams): Promise<QueryResult>;
    exec(params: ExecParams): Promise<ExecResult>;
    insert(params: InsertParams): Promise<InsertResult>;
    close(): Promise<void>;
    private getQueryId;
    private logResponse;
    protected getHeaders(params: RequestParams): {
        'Content-Encoding'?: string | undefined;
        'Accept-Encoding'?: string | undefined;
    };
}
