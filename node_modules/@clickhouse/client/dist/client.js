"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createClient = exports.encodeValues = exports.validateInsertValues = exports.ClickHouseClient = void 0;
const stream_1 = __importDefault(require("stream"));
const connection_1 = require("./connection");
const logger_1 = require("./logger");
const utils_1 = require("./utils");
const data_formatter_1 = require("./data_formatter");
const result_1 = require("./result");
function validateConfig({ url }) {
    if (url.protocol !== 'http:' && url.protocol !== 'https:') {
        throw new Error(`Only http(s) protocol is supported, but given: [${url.protocol}]`);
    }
    // TODO add SSL validation
}
function createUrl(host) {
    try {
        return new URL(host);
    }
    catch (err) {
        throw new Error('Configuration parameter "host" contains malformed url.');
    }
}
function normalizeConfig(config) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    let tls = undefined;
    if (config.tls) {
        if ('cert' in config.tls && 'key' in config.tls) {
            tls = {
                type: 'Mutual',
                ...config.tls,
            };
        }
        else {
            tls = {
                type: 'Basic',
                ...config.tls,
            };
        }
    }
    return {
        application_id: config.application,
        url: createUrl((_a = config.host) !== null && _a !== void 0 ? _a : 'http://localhost:8123'),
        request_timeout: (_b = config.request_timeout) !== null && _b !== void 0 ? _b : 300000,
        max_open_connections: (_c = config.max_open_connections) !== null && _c !== void 0 ? _c : Infinity,
        tls,
        compression: {
            decompress_response: (_e = (_d = config.compression) === null || _d === void 0 ? void 0 : _d.response) !== null && _e !== void 0 ? _e : true,
            compress_request: (_g = (_f = config.compression) === null || _f === void 0 ? void 0 : _f.request) !== null && _g !== void 0 ? _g : false,
        },
        username: (_h = config.username) !== null && _h !== void 0 ? _h : 'default',
        password: (_j = config.password) !== null && _j !== void 0 ? _j : '',
        database: (_k = config.database) !== null && _k !== void 0 ? _k : 'default',
        clickhouse_settings: (_l = config.clickhouse_settings) !== null && _l !== void 0 ? _l : {},
        log: {
            LoggerClass: (_o = (_m = config.log) === null || _m === void 0 ? void 0 : _m.LoggerClass) !== null && _o !== void 0 ? _o : logger_1.DefaultLogger,
        },
        session_id: config.session_id,
        keep_alive: {
            enabled: (_q = (_p = config.keep_alive) === null || _p === void 0 ? void 0 : _p.enabled) !== null && _q !== void 0 ? _q : true,
            socket_ttl: (_s = (_r = config.keep_alive) === null || _r === void 0 ? void 0 : _r.socket_ttl) !== null && _s !== void 0 ? _s : 2500,
            retry_on_expired_socket: (_u = (_t = config.keep_alive) === null || _t === void 0 ? void 0 : _t.retry_on_expired_socket) !== null && _u !== void 0 ? _u : false,
        },
    };
}
class ClickHouseClient {
    constructor(config = {}) {
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "connection", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "logger", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.config = normalizeConfig(config);
        validateConfig(this.config);
        this.logger = new logger_1.LogWriter(new this.config.log.LoggerClass());
        this.connection = (0, connection_1.createConnection)(this.config, this.logger);
    }
    getBaseParams(params) {
        return {
            clickhouse_settings: {
                ...this.config.clickhouse_settings,
                ...params.clickhouse_settings,
            },
            query_params: params.query_params,
            abort_signal: params.abort_signal,
            session_id: this.config.session_id,
            query_id: params.query_id,
        };
    }
    /**
     * Used for most statements that can have a response, such as SELECT.
     * FORMAT clause should be specified separately via {@link QueryParams.format} (default is JSON)
     * Consider using {@link ClickHouseClient.insert} for data insertion,
     * or {@link ClickHouseClient.command} for DDLs.
     */
    async query(params) {
        var _a;
        const format = (_a = params.format) !== null && _a !== void 0 ? _a : 'JSON';
        const query = formatQuery(params.query, format);
        const { stream, query_id } = await this.connection.query({
            query,
            ...this.getBaseParams(params),
        });
        return new result_1.ResultSet(stream, format, query_id);
    }
    /**
     * It should be used for statements that do not have any output,
     * when the format clause is not applicable, or when you are not interested in the response at all.
     * Response stream is destroyed immediately as we do not expect useful information there.
     * Examples of such statements are DDLs or custom inserts.
     * If you are interested in the response data, consider using {@link ClickHouseClient.exec}
     */
    async command(params) {
        const { stream, query_id } = await this.exec(params);
        stream.destroy();
        return { query_id };
    }
    /**
     * Similar to {@link ClickHouseClient.command}, but for the cases where the output is expected,
     * but format clause is not applicable. The caller of this method is expected to consume the stream,
     * otherwise, the request will eventually be timed out.
     */
    async exec(params) {
        const query = removeTrailingSemi(params.query.trim());
        return await this.connection.exec({
            query,
            ...this.getBaseParams(params),
        });
    }
    /**
     * The primary method for data insertion. It is recommended to avoid arrays in case of large inserts
     * to reduce application memory consumption and consider streaming for most of such use cases.
     * As the insert operation does not provide any output, the response stream is immediately destroyed.
     * In case of a custom insert operation, such as, for example, INSERT FROM SELECT,
     * consider using {@link ClickHouseClient.command}, passing the entire raw query there (including FORMAT clause).
     */
    async insert(params) {
        const format = params.format || 'JSONCompactEachRow';
        validateInsertValues(params.values, format);
        const query = `INSERT INTO ${params.table.trim()} FORMAT ${format}`;
        return await this.connection.insert({
            query,
            values: encodeValues(params.values, format),
            ...this.getBaseParams(params),
        });
    }
    /**
     * Health-check request. Can throw an error if the connection is refused.
     */
    async ping() {
        return await this.connection.ping();
    }
    /**
     * Shuts down the underlying connection.
     * This method should ideally be called only once per application lifecycle,
     * for example, during the graceful shutdown phase.
     */
    async close() {
        return await this.connection.close();
    }
}
exports.ClickHouseClient = ClickHouseClient;
function formatQuery(query, format) {
    query = query.trim();
    query = removeTrailingSemi(query);
    return query + ' \nFORMAT ' + format;
}
function removeTrailingSemi(query) {
    let lastNonSemiIdx = query.length;
    for (let i = lastNonSemiIdx; i > 0; i--) {
        if (query[i - 1] !== ';') {
            lastNonSemiIdx = i;
            break;
        }
    }
    if (lastNonSemiIdx !== query.length) {
        return query.slice(0, lastNonSemiIdx);
    }
    return query;
}
function validateInsertValues(values, format) {
    if (!Array.isArray(values) &&
        !(0, utils_1.isStream)(values) &&
        typeof values !== 'object') {
        throw new Error('Insert expected "values" to be an array, a stream of values or a JSON object, ' +
            `got: ${typeof values}`);
    }
    if ((0, utils_1.isStream)(values)) {
        if ((0, data_formatter_1.isSupportedRawFormat)(format)) {
            if (values.readableObjectMode) {
                throw new Error(`Insert for ${format} expected Readable Stream with disabled object mode.`);
            }
        }
        else if (!values.readableObjectMode) {
            throw new Error(`Insert for ${format} expected Readable Stream with enabled object mode.`);
        }
    }
}
exports.validateInsertValues = validateInsertValues;
/**
 * A function encodes an array or a stream of JSON objects to a format compatible with ClickHouse.
 * If values are provided as an array of JSON objects, the function encodes it in place.
 * If values are provided as a stream of JSON objects, the function sets up the encoding of each chunk.
 * If values are provided as a raw non-object stream, the function does nothing.
 *
 * @param values a set of values to send to ClickHouse.
 * @param format a format to encode value to.
 */
function encodeValues(values, format) {
    if ((0, utils_1.isStream)(values)) {
        // TSV/CSV/CustomSeparated formats don't require additional serialization
        if (!values.readableObjectMode) {
            return values;
        }
        // JSON* formats streams
        return stream_1.default.pipeline(values, (0, utils_1.mapStream)((value) => (0, data_formatter_1.encodeJSON)(value, format)), pipelineCb);
    }
    // JSON* arrays
    if (Array.isArray(values)) {
        return values.map((value) => (0, data_formatter_1.encodeJSON)(value, format)).join('');
    }
    // JSON & JSONObjectEachRow format input
    if (typeof values === 'object') {
        return (0, data_formatter_1.encodeJSON)(values, format);
    }
    throw new Error(`Cannot encode values of type ${typeof values} with ${format} format`);
}
exports.encodeValues = encodeValues;
function createClient(config) {
    return new ClickHouseClient(config);
}
exports.createClient = createClient;
function pipelineCb(err) {
    if (err) {
        console.error(err);
    }
}
//# sourceMappingURL=client.js.map